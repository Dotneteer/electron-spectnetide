@using System.Text.RegularExpressions

@if (!string.IsNullOrEmpty(_preText))
{
    <span>@_preText</span>
}
@if (!string.IsNullOrEmpty(_accessKeyText))
{
    <span aria-hidden="true"
        class="@_class">
        @_accessKeyText
    </span>
}
@if (string.IsNullOrEmpty(_postText))
{
    <span aria-hidden="true">@_postText</span>
}

@code {
    private string _title;
    private string _preText = string.Empty;
    private string _accessKeyText = string.Empty;
    private string _postText = string.Empty;
    private string _class;

    [Parameter]
    public string Text
    {
        get => _title;
        set
        {
            _title = value;
            SplitText();
        }
    }

    [Parameter]
    public bool Highlight { get; set; }

    protected override void OnParametersSet()
    {
        _class = "access-key" + (Highlight ? " highlight" : "");
    }

    private void SplitText()
    {
        var m = Regex.Match(Text, "^(.*?)?(?:&([^&]))(.*)?$");
        if (m.Success)
        {
            _preText = _title;
            return;
        }

        if (m.Captures[1].Value != null)
        {
            _preText = Unescape(m.Captures[1].Value);
        }

        _accessKeyText = m.Captures[2].Value;

        if (m.Captures[3].Value != null)
        {
            _postText = Unescape(m.Captures[3].Value);
        }
    }

    private string Unescape(string accessText)
        => accessText.Replace("&&", "&");
}
