@{
    // This component is responsible to display the menu bar of the application and manage
    // all keyboard and mouse events that control the menu behavior.
}

@inherits StateAwareComponentBase
@inject IThemingService<ThemeProps> ThemingService
@inject IFocusManagerService FocusManagerService

<div class="menu-bar" tabindex="0">
    @{
        var menuState = AppState?.MenuState;
        if (menuState?.AppMenu != null)
        {
            var appMenu = menuState.AppMenu;
            // --- Display the top-level menu items as MenuButtons
            for (var i = 0; i < appMenu.Items.Count; i++)
            {
                var menuItem = appMenu.Items[i];
                <MenuButton Item="@menuItem"
                            Index="@i"
                            ComponentInstanceID="@GetMenuButtonId(i)"
                            Highlight="menuState.HighlightAccessKeys"
                            TitleColor="@_titleColor"
                            Pointed="@(menuState.SelectedIndex == i)"
                            BoundariesChanged="@OnButtonBoundariesChanged" 
                            OnMouseEntered="@OnMenuButtonMouseEnter"
                            OnButtonClicked="@OnMenuButtonClick"
                            />
            }

            // --- Display the list of open menu panes
            <MenuPaneList @ref="@_menuPaneListComponent"
                          Panes="@menuState.OpenPanes"
                          HighLight="@menuState.HighlightAccessKeys"
                          MenuItemPointed="@OnMenuItemPointed"
                          MenuItemClicked="@OnMenuItemClicked" />
        }
    }
</div>

@code {
    // --- Store the color of the title (it's different for focused/unfocused state)
    private string _titleColor;

    // --- To display menu panes, we need to keep track of menu button boundaries
    private readonly Dictionary<string, ElementBoundaries> _buttonBoundaries =
        new Dictionary<string, ElementBoundaries>();

    // --- Shows the pane index to remove
    private int _delayedRemove = -1;

    // --- We use this when when pointing with the mouse
    private int _lastSubmenuParent = -1;

    // --- The menu item the mouse entered last time
    private MenuItemEventArgs _lastMouseEntered;

    // --- Reference to this component
    private MenuPaneList _menuPaneListComponent;

    /// <summary>
    /// Gets the ID of a menu button
    /// </summary>
    public static string GetMenuButtonId(int index) => $"Button{index}";

    /// <summary>
    /// Gets the ID of a pane with a particular index
    /// </summary>
    public static string GetMenuPaneId(int index) => $"Pane{index}";

    /// <summary>
    /// Gets the ID of a menu item
    /// </summary>
    public static string GetMenuItemId(int index) => $"Item{index}";

    /// <summary>
    /// Turns on listening to FocusManager events
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        FocusManagerService.AppKeyDown += OnKeyDown;
        FocusManagerService.AppKeyUp += OnKeyUp;
    }

    /// <summary>
    /// Turns off listening to FocusManager events
    /// </summary>
    public override void Dispose()
    {
        base.Dispose();
        FocusManagerService.AppKeyDown -= OnKeyDown;
        FocusManagerService.AppKeyUp -= OnKeyUp;
    }

    /// <summary>
    /// Respond to application state changes
    /// </summary>
    protected override void OnStateChanged(AppState prevState, AppState newState)
    {
        CalculateColors(newState.HasFocus);
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Calculate MenuBar color according to focused/unfocused state
    /// </summary>
    /// <param name="hasFocus"></param>
    private void CalculateColors(bool hasFocus)
    {
        _titleColor = ThemingService.GetProperty(s =>
            hasFocus ? s.TitleBarActiveColor : s.TitleBarInactiveColor);
    }

    /// <summary>
    /// Store the boundaries of a particular menu button
    /// </summary>
    private void OnButtonBoundariesChanged(BoundariesEventArgs args)
    {
        if (args.ComponentId != null)
        {
            _buttonBoundaries[args.ComponentId] = args.Boundaries;
        }
    }

    /// <summary>
    /// Shortcut to the app's menu state
    /// </summary>
    private AppMenuState MenuState => AppState.MenuState;


    /// <summary>
    /// Listen to keydown events to implement menu navigation
    /// </summary>
    private async void OnKeyDown(object sender, KeyboardEventArgs args)
    {
        Console.WriteLine($"KeyDown: {args.Code}");

        // --- Set the pointed state of the menu bar
        if (args.Code == "AltLeft") Dispatch(new MenuAltPressedAction());

        // --- No button is pointed, no more action 
        if (MenuState.SelectedIndex < 0) return;

        // --- From this point on, we use the keyboard.
        // --- Here, we allow the mouse to delay submenu removal.
        _delayedRemove = -1;
        if (args.Code == "Escape")
        {
            Dispatch(new MenuPaneClosedAction());
            return;
        }

        // --- Move one step to left, or close the last pane.
        if (args.Code == "ArrowLeft") {
            if (MenuState.OpenPanes.Count > 1)
            {
                // --- Close the last pane
                Dispatch(new MenuPaneClosedAction());
                return;
            }

            // --- Move to the left
            var index = MenuState.SelectedIndex - 1;
            if (index < 0) index = MenuState.AppMenu.Items.Count - 1;

            // --- Open the pane of the current menu button
            var pane = MenuState.OpenPanes.Count > 0
                ? GetButtonPane(index)
                : null;
            Dispatch(new MenuButtonSetAction(index, pane, true));
            return;
        }

        // --- Move one step to right, or open a submenu pane.
        if (args.Code == "ArrowRight") {
            // --- Try to open the submenu of the current item and complete if succeeded
            if (TryOpenSubmenu()) return;

            // --- We're not in the first menu pane
            if (MenuState.OpenPanes.Count > 1) return;

            // --- We're in the first menu pane, move to the right
            var index = MenuState.SelectedIndex + 1;
            if (index > MenuState.AppMenu.Items.Count - 1) index = 0;

            // --- Open the pane of the current menu button
            var pane = MenuState.OpenPanes.Count > 0
                ? GetButtonPane(index)
                : null;
            Dispatch(new MenuButtonSetAction(index, pane, true));
            return;
        }

        // --- Execute the current menu item
        if (args.Code == "Enter")
        {
            MenuItemAction();
            return;
        }

        // --- Move one step down, or open the pane of a button
        if (args.Code == "ArrowDown")
        {
            if (MenuState.OpenPanes.Count == 0)
            {
                var index = MenuState.SelectedIndex;
                Dispatch(new MenuButtonSetAction(index, GetButtonPane(index), true));
            }
            else
            {
                Dispatch(new MenuItemDownAction());
            }
            return;
        }

        // --- Move one step down in the current open pane
        if (args.Code == "ArrowUp")
        {
            Dispatch(new MenuItemUpAction());
            return;
        }

        // --- Do we need to check the accelerator keys?
        if (!MenuState.HighlightAccessKeys) return;

        // --- Yes, we need to
        if (MenuState.OpenPanes.Count > 0)
        {
            // --- Check the topmost open pane
            var pane = MenuState.OpenPanes.Last();
            var pressedIndex = FindAccessKeyIndex(args.Code, pane.Items);
            if (pressedIndex < 0) return;

            // --- Accelerator key found, execute the item after a short delay
            Dispatch(new MenuItemSelectAction(pressedIndex));
            await Task.Delay(100);
            MenuItemAction();
        }
        else
        {
            // --- Check the main menu
            var pressedIndex = FindAccessKeyIndex(args.Code, MenuState.AppMenu.Items, false);
            if (pressedIndex < 0) return;
            // --- Access button found, set the main menu item to display
            var pane = MenuState.OpenPanes.Count > 0
                ? GetButtonPane(pressedIndex)
                : null;
            Dispatch(new MenuButtonSetAction(pressedIndex, pane, true));

            // --- Open the related menu pane
            var index = MenuState.SelectedIndex;
            pane = GetButtonPane(index);
            Dispatch(new MenuButtonSetAction(index, pane, true));
        }
    }

    /// <summary>
    /// Listen to keydown events to implement menu navigation
    /// </summary>
    private void OnKeyUp(object sender, KeyboardEventArgs args)
    {
        if (args.Code == "AltLeft")
        {
            Dispatch(new MenuAltReleasedAction());
        }
    }

    /// <summary>
    /// Listen to the mouseenter event of menu buttons
    /// </summary>
    private void OnMenuButtonMouseEnter(MenuButton button)
    {
        var pane = MenuState.OpenPanes.Count > 0
            ? GetButtonPane(button.Index)
            : null;
        Dispatch(new MenuButtonSetAction(button.Index, pane, false));
        _lastMouseEntered = null;
    }

    /// <summary>
    /// Listen to the click event of menu buttons
    /// </summary>
    private void OnMenuButtonClick(MenuButton button)
    {
        if (MenuState.OpenPanes.Count > 0)
        {
            Dispatch(new MenuPaneClosedAction());
        }
        else
        {
            var pane = GetButtonPane(button.Index);
            Dispatch(new MenuButtonClickAction(pane, button.Index));
        }
    }

    /// <summary>
    /// Respond to the event when an item on a displayed menu pane is pointed.
    /// </summary>
    private async void OnMenuItemPointed(MenuItemEventArgs item)
    {
        if (_lastMouseEntered?.Pane?.Depth == item.Pane.Depth
            && _lastMouseEntered?.ItemIndex == item.ItemIndex)
        {
            return;
        }

        _lastMouseEntered = item;

        // --- Check delayed remove
        if (_delayedRemove < 0 && item.Pane.Depth < MenuState.OpenPanes.Count - 1)
        {

            // --- We're about to remove a displayed submenu pane. Let allow the user move
            // --- with the mouse for a little time before hiding the submenu item.
            _delayedRemove = MenuState.OpenPanes.Count - 1;
            _lastSubmenuParent = MenuState.OpenPanes[_delayedRemove].ParentIndex;

            // --- We remove the last submenu if the last mouse point is not on the submenu or
            // --- the parent menu item.
            await Task.Delay(400);
            if (_lastMouseEntered?.Pane?.Depth < _delayedRemove
                && MenuState.OpenPanes[_delayedRemove - 1].SelectedIndex != _lastSubmenuParent)
            {
                Dispatch(new MenuKeepPaneAction(_lastMouseEntered.Pane.Depth));
            }
            _delayedRemove = -1;
        }

        // --- Select the pointed menu item
        Dispatch(new MenuItemPointAction(item.Pane.Depth, item.ItemIndex));
        var parentIndex = MenuState.OpenPanes[item.Pane.Depth].ParentIndex;
        for (var i = item.Pane.Depth - 1; i >= 0; i--)
        {
            Dispatch(new MenuItemPointAction(i, parentIndex));
            parentIndex = MenuState.OpenPanes[i].ParentIndex;
        }

        // --- Open submenu, provided the current item has it -- with a little delay
        await Task.Delay(600);
        var submenuPane = GetSubmenuPane();
        if (submenuPane != null)
        {
            Dispatch(new MenuPaneOpenAction(submenuPane, false));
        }
    }

    /// <summary>
    /// Respond to the event when an item on a displayed menu pane is clicked
    /// </summary>
    private void OnMenuItemClicked(MenuItemEventArgs item)
    {
        var menuItem = MenuState.OpenPanes[item.Pane.Depth].Items.Flatten().ToArray()[item.ItemIndex];
        if (menuItem.Visible && menuItem.Enabled)
        {
            ExecuteMenuItem(menuItem);
        }
    }

    /// <summary>
    /// Gets the information about the specified menu pane
    /// </summary>
    /// <param name="index">MenuButton index</param>
    private MenuPaneInfo GetButtonPane(int index)
    {
        MenuPaneInfo pane = null;
        if (_buttonBoundaries.TryGetValue(GetMenuButtonId(index), out var boundary))
        {
            pane = new MenuPaneInfo
            {
                ParentIndex = -1,
                SelectedIndex = -1,
                Items = MenuState.AppMenu.Items[index].Items,
                LeftPos = boundary.OffsetLeft,
                TopPos = boundary.OffsetTop + boundary.OffsetHeight
            };
            if (MenuState.KeyboardAction)
            {
                SetFirstMenuItemIndex(pane);
            }
        }
        return pane;
    }

    /// <summary>
    /// Sets the index of the first available menu item within the pane.
    /// </summary>
    /// <param name="pane"></param>
    private static void SetFirstMenuItemIndex(MenuPaneInfo pane)
    {
        var selectedIndex = -1;
        var index = 0;
        foreach(var item in pane.Items.Flatten())
        {
            if (item.Visible && item.Enabled)
            {
                selectedIndex = index;
                break;
            }
            index++;
        }
        pane.SelectedIndex = selectedIndex;
    }

    /// <summary>
    /// Gets the pane information about the topmost menu pane
    /// </summary>
    /// <returns></returns>
    private MenuPaneInfo GetSubmenuPane()
    {
        // --- Check if we have an available submenu item
        var lastPaneId = MenuState.OpenPanes.Count - 1;
        if (lastPaneId < 0) return null;

        var pane = MenuState.OpenPanes.Last();
        if (pane.SelectedIndex < 0) return null;

        var item = pane.Items.Flatten().ToArray()[pane.SelectedIndex];
        if (!item.HasSubitems) return null;

        // --- We have a submenu item that can be displayed
        var paneId = GetMenuPaneId(lastPaneId);
        var itemId = GetMenuItemId(pane.SelectedIndex);
        var paneBoundaries = _menuPaneListComponent.PaneBoundaries[paneId];
        var itemBoundaries = _menuPaneListComponent.PaneItemBoundaries[paneId][itemId];
        var subPane = new MenuPaneInfo
        {
            ParentIndex = pane.SelectedIndex,
            Items = item.Items,
            SelectedIndex = -1,
            LeftPos = paneBoundaries.OffsetLeft + paneBoundaries.OffsetWidth,
            TopPos = paneBoundaries.OffsetTop + itemBoundaries.OffsetTop - 8
        };
        SetFirstMenuItemIndex(subPane);
        return subPane;
    }

    private bool TryOpenSubmenu()
    {
        var submenuPane = GetSubmenuPane();
        if (submenuPane == null) return false;
        Dispatch(new MenuPaneOpenAction(submenuPane, true));
        _lastMouseEntered = null;
        return true;
    }

    private void MenuItemAction()
    {
        // --- If the current item points to a submenu, open it
        if (TryOpenSubmenu()) return;

        if (MenuState.OpenPanes.Count == 0)
        {
            var index = MenuState.SelectedIndex;
            Dispatch(new MenuButtonSetAction(index, GetButtonPane(index), true));
            return;
        }

        // --- Do we have a selected item on the current pane?
        var pane = MenuState.OpenPanes.Last();
        if (pane.SelectedIndex < 0) return;

        ExecuteMenuItem(pane.Items.Flatten().ToArray()[pane.SelectedIndex]);
    }

    private void ExecuteMenuItem(UiMenuItem item)
    {
        if (!item.HasSubitems)
        {
            Dispatch(new MenuCloseAllPanesAction());
            item.OnExecute(AppWindow.Instance.Window);
        }
    }

    private int FindAccessKeyIndex(string code, IEnumerable<UiMenuItem> items, bool flatten = true)
    {
        code = code.ToLower();
        var flattened = (flatten ? items.Flatten() : items).ToList();
        var item = flattened.FirstOrDefault(i => i.AccessKey != null && (
            "key" + i.AccessKey.ToLower() == code ||
            "digit" + i.AccessKey.ToLower() == code ||
            "numpad" + i.AccessKey.ToLower() == code));
        if (item == null) return -1;
        return flattened.IndexOf(item);
    }
}
