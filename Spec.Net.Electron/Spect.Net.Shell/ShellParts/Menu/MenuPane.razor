@inherits StyleAwareComponentBase

<div @ref="@RootElement"
    class="menu-pane" style="@_styleValue">
    @{
        var lastItemWasGroup = false;
        var groupJustEnded = false;
        var index = 0;
        for (var i = 0; i < Items.Count; i++)
        {
            var item = Items[i];
            // --- Provide separator between groups
            if (i > 0 && item.HasSubitems != lastItemWasGroup || groupJustEnded)
            {
                <MenuItem Item="@(new SeparatorMenuItem())" />
            }
            lastItemWasGroup = item.HasSubitems;
            groupJustEnded = false;
            if (item.HasSubitems)
            {
                // --- We are about to process a command group
                for (var j = 0; j < item.Items.Count; j++)
                {
                    var subitem = item.Items[j];
                    <MenuItem Item="@subitem"
                              ComponentInstanceID="@MenuBar.GetMenuItemId(index)"
                              ItemIndex="@index"
                              Highlight="@Highlight"
                              Selected="@(SelectedIndex == index)"
                              MenuItemPointed="@(mi => OnMenuItemPointed(mi))"
                              MenuItemClicked="@(mi => OnMenuItemClicked(mi))"
                              BoundariesChanged="@OnBoundariesChanged" />
                    index++;
                }
                groupJustEnded = true;
            }
            else
            {
                <MenuItem Item="@item"
                          ComponentInstanceID="@MenuBar.GetMenuItemId(index)"
                          ItemIndex="@index"
                          Highlight="@Highlight"
                          Selected="@(SelectedIndex == index)"
                          MenuItemPointed="@(mi => OnMenuItemPointed(mi))"
                          MenuItemClicked="@(mi => OnMenuItemClicked(mi))"
                          BoundariesChanged="OnBoundariesChanged" />
                index++;
            }
        }
    }
</div>

@code {
    private string _styleValue;

    [Parameter]
    public int Depth { get; set; }

    [Parameter]
    public List<UiMenuItem> Items { get; set; }

    [Parameter]
    public bool Highlight { get; set; }

    [Parameter]
    public int LeftPosition { get; set; }

    [Parameter]
    public int TopPosition { get; set; }

    [Parameter]
    public int SelectedIndex { get; set; } = -1;

    [Parameter]
    public EventCallback<MenuItemEventArgs> MenuItemPointed { get; set; }

    [Parameter]
    public EventCallback<MenuItemEventArgs> MenuItemClicked { get; set; }

    [Parameter]
    public EventCallback<BoundariesEventArgs> ItemBoundaryChanged { get; set; }

    /// <summary>
    /// MenuItem boundaries
    /// </summary>
    public Dictionary<string, ElementBoundaries> MenuItemBoundaries { get; private set; }  =
        new Dictionary<string, ElementBoundaries>();

    /// <summary>
    /// Update the style of the pane
    /// </summary>
    protected override void OnParametersSet()
    {
        _styleValue = new StyleBuilder()
            .AddStyle("z-index", $"{Depth + 100}")
            .AddStyle("left", $"{LeftPosition}px")
            .AddStyle("top", $"{TopPosition}px")
            .Build();
    }

    /// <summary>
    /// Store the boundaries of a particular menu item
    /// </summary>
    private async void OnBoundariesChanged(BoundariesEventArgs args)
    {
        if (args.ComponentId != null)
        {
            MenuItemBoundaries[args.ComponentId] = args.Boundaries;
            await ItemBoundaryChanged.InvokeAsync(
                new BoundariesEventArgs(args.ComponentId, args.Boundaries, ComponentInstanceID));
        }
    }

    /// <summary>
    /// Sign that a menu item has been pointed
    /// </summary>
    private async Task OnMenuItemPointed(MenuItem item)
    {
        await MenuItemPointed.InvokeAsync(new MenuItemEventArgs
        {
            Pane = this,
            ItemIndex = item == null ? -1 : item.ItemIndex
        });
    }

    /// <summary>
    /// Sign that a menu item has been clicked
    /// </summary>
    private async Task OnMenuItemClicked(MenuItem item)
    {
        await MenuItemClicked.InvokeAsync(new MenuItemEventArgs
        {
            Pane = this,
            ItemIndex = item == null ? -1 : item.ItemIndex
        });
    }
}
